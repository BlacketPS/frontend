import { useState, useEffect, useRef } from "react";
import { useMessages } from "@stores/MessageStore";
import { UsersTypingContainer } from "@components/Chat";
import styles from "@styles";

export default function InputContainer({ placeholder, maxLength }) {
    const { sendMessage, startTyping, usersTyping } = useMessages();

    const [rawContent, setRawContent] = useState("");
    const [formattedContent, setFormattedContent] = useState(window.navigator.userAgent.indexOf("Firefox") !== -1 ? "<br>" : "");
    const [cursorPosition, setCursorPosition] = useState(null);

    const inputContainerRef = useRef();
    const inputRef = useRef();

    const handleInput = (e) => {
        const textContent = e.target.textContent;
        let htmlContent = e.target.innerHTML;

        if (htmlContent.length > maxLength) return e.target.innerHTML = htmlContent.slice(0, maxLength);

        setRawContent(textContent);
        setFormattedContent(htmlContent);

        inputContainerRef.current.style.height = "auto";
        inputContainerRef.current.style.height = inputRef.current.scrollHeight + 9 + "px";

        startTyping();
    }

    const handlePaste = (e) => {
        e.preventDefault();

        const text = (e.clipboardData || window.clipboardData).getData("date");

        const selection = window.getSelection();

        if (!selection.rangeCount) return false;
        selection.deleteFromDocument();
        selection.getRangeAt(0).insertNode(document.createTextNode(text));

        const textContent = e.target.textContent;
        let htmlContent = e.target.innerHTML;

        setRawContent(textContent);
        setFormattedContent(htmlContent);
    }

    /*useEffect(() => {
        if (inputRef.current && cursorPosition) {
            const range = document.createRange();
            const selection = window.getSelection();

            if (inputRef.current.firstChild) {
                range.setStart(inputRef.current.firstChild, Math.min(cursorPosition, inputRef.current.firstChild.length));
                range.collapse(true);

                selection.removeAllRanges();
                selection.addRange(range);
            }
        }

        inputContainerRef.current.style.height = "auto";
        inputContainerRef.current.style.height = inputRef.current.scrollHeight + 9 + "px";
    }, [formattedContent, cursorPosition]);*/

    return (
        <div className={styles.chat.messageForm}>
            <UsersTypingContainer usersTyping={usersTyping} />

            <div ref={inputContainerRef} className={styles.chat.messageInputContainer} style={{ height: "40px" }}>
                {placeholder && rawContent.length === 0 && <div className={styles.chat.messageInputPlaceholder}>{placeholder}</div>}

                <div ref={inputRef} className={styles.chat.messageInput} spellCheck={true} onInput={handleInput} onPaste={handlePaste} onKeyDown={(e) => {
                if (e.key === "Enter" && e.shiftKey) {
                } else if (e.key === "Enter") {
                    e.preventDefault();

                    if (rawContent.replace(/\s/g, "").length === 0) return;

                    sendMessage(rawContent);

                    setRawContent("");
                    setFormattedContent(window.navigator.userAgent.indexOf("Firefox") !== -1 ? "<br>" : "");
                    e.target.innerHTML = "";
                }
            }}
                contentEditable={true}
                dangerouslySetInnerHTML={{ __html: formattedContent }}
                style={{ paddingTop: rawContent.length === 0 ? "9px" : "" }}
            />
        </div>
        </div >
    )
}