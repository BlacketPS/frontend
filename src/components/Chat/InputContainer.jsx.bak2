import { useState, useEffect, useRef } from "react";
import { useMessages } from "@stores/MessageStore";
import { UsersTypingContainer } from "@components/Chat";
import styles from "@styles";

export default function InputContainer({ placeholder, maxLength }) {
    const { sendMessage, startTyping, usersTyping } = useMessages();

    const [rawContent, setRawContent] = useState("");
    const [formattedContent, setFormattedContent] = useState(window.navigator.userAgent.indexOf("Firefox") !== -1 ? "<br>" : "");
    const [cursorPosition, setCursorPosition] = useState(null);

    const inputRef = useRef();

    const handleInput = (e) => {
        const textContent = e.target.textContent;
        let htmlContent = e.target.innerHTML;

        if (htmlContent.length > maxLength) return e.target.innerHTML = htmlContent.slice(0, maxLength);

        if (window.getSelection().rangeCount > 0) setCursorPosition(window.getSelection().getRangeAt(0).endOffset);

        setRawContent(textContent);
        setFormattedContent(htmlContent);

        startTyping();
    }

    const handlePaste = (e) => {
        e.preventDefault();

        const text = e.clipboardData.getData("text/plain");

        const selection = window.getSelection();
        if (!selection.rangeCount) return false;

        const range = selection.getRangeAt(0);
        range.deleteContents();

        const textNode = document.createTextNode(text);

        range.insertNode(textNode);
        range.setStartAfter(textNode);
        range.setEndAfter(textNode);

        selection.removeAllRanges();
        selection.addRange(range);

        setRawContent(inputRef.current.textContent);
        setFormattedContent(inputRef.current.innerHTML);
    }

    useEffect(() => {
        if (inputRef.current && cursorPosition) {
            const range = document.createRange();
            const selection = window.getSelection();

            if (inputRef.current.firstChild) {
                range.setStart(inputRef.current.firstChild, Math.min(cursorPosition, inputRef.current.firstChild.length));
                range.collapse(true);

                selection.removeAllRanges();
                selection.addRange(range);
            }
        }
    }, [formattedContent, cursorPosition]);

    return (
        <div className={styles.chat.messageForm}>
            <UsersTypingContainer usersTyping={usersTyping} />

            <div className={styles.chat.messageInputContainer}>
                {placeholder && rawContent.length === 0 && <div className={styles.chat.messageInputPlaceholder}>{placeholder}</div>}

                <div ref={inputRef} className={styles.chat.messageInput} spellCheck={true} onInput={handleInput} onPaste={handlePaste} onKeyDown={(e) => {
                    if (e.key === "Enter" && e.shiftKey) {
                        e.preventDefault();

                        if (rawContent.replace(/\s/g, "").length === 0) return;

                        const selection = window.getSelection();
                        const range = selection.getRangeAt(0);
                        const cursorPosition = range.startOffset;

                        const textContent = e.target.textContent;
                        const textBeforeCursor = textContent.substring(0, cursorPosition);
                        const textAfterCursor = textContent.substring(cursorPosition);

                        let newLineIndex = textBeforeCursor.lastIndexOf("\n");
                        if (newLineIndex === -1) newLineIndex = textBeforeCursor.length;

                        const lineText = textBeforeCursor.substring(newLineIndex + 1);
                        const newTextBeforeCursor = textBeforeCursor.substring(0, newLineIndex + 1) + textAfterCursor + "\n" + lineText;

                        e.target.textContent = newTextBeforeCursor;

                        range.setStart(e.target.firstChild, newTextBeforeCursor.length - lineText.length);
                        range.collapse(true);

                        selection.removeAllRanges();
                        selection.addRange(range);

                        setRawContent(e.target.textContent);
                        setFormattedContent(e.target.innerHTML);
                    }
                    else if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();

                        if (rawContent.replace(/\s/g, "").length === 0) return;

                        sendMessage(rawContent);

                        setRawContent("");
                        setFormattedContent(window.navigator.userAgent.indexOf("Firefox") !== -1 ? "<br>" : "");
                        e.target.innerHTML = "";
                    }
                }}
                    contentEditable={true}
                    dangerouslySetInnerHTML={{ __html: formattedContent }}
                    style={{ paddingTop: rawContent.length === 0 ? "9px" : "" }}
                />
            </div>
        </div>
    )
}