import { GameObjects, Scene } from "phaser";

let data: Phaser.GameObjects.GameObject;

function random(min: number, max: number): number {
    return Math.random() * (max - min) + min;
}

function randomInt(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min)) + min;
}

function particleType(e: string, scene: Phaser.Scene): object {
    switch (e) {
        case "center": {
            const t = random(-115, -65);

            return {
                x: data.scene.cameras.main.worldView.width / 2,
                y: data.scene.cameras.main.worldView.height / 2,
                scale: random(.7, 1),
                angle: t,
                velocity: random(600, 750),
                gravity: 700,
                angVelocity: (t > -90 ? 1 : -1) * random(125, 175),
                lifespan: 2500
            };
        }
        case "right-bottom": return {
            x: data.scene.cameras.main.worldView.width,
            y: data.scene.cameras.main.worldView.height,
            scale: random(.7, 1),
            angle: random(-160, -110),
            velocity: random(600, 750),
            gravity: 500,
            angVelocity: random(-175, -125),
            lifespan: 2500
        };
        case "left-bottom": return {
            x: 0,
            y: data.scene.cameras.main.worldView.height,
            scale: random(.7, 1),
            angle: random(-70, -20),
            velocity: random(600, 750),
            gravity: 500,
            angVelocity: random(125, 175),
            lifespan: 2500
        };
        case "top": return {
            x: random(0, data.scene.cameras.main.worldView.width),
            y: -50,
            scale: random(.7, 1),
            angle: 90,
            velocity: random(0, 50),
            gravity: 700,
            angVelocity: random(-150, 150),
            lifespan: 2500
        };
        case "right-shower": return {
            x: data.scene.cameras.main.worldView.width,
            y: random(0, data.scene.cameras.main.worldView.height),
            scale: random(.7, 1),
            angle: random(-180, -130),
            velocity: random(600, 750),
            gravity: 500,
            angVelocity: random(-175, -125),
            lifespan: 2500
        };
        case "left-shower": return {
            x: 0,
            y: random(0, data.scene.cameras.main.worldView.height),
            scale: random(.7, 1),
            angle: random(-50, 0),
            velocity: random(600, 750),
            gravity: 500,
            angVelocity: random(125, 175),
            lifespan: 2500
        };
        case "right-diamond": {
            const a = random(0, data.scene.cameras.main.worldView.height);

            return {
                x: data.scene.cameras.main.worldView.width,
                y: a,
                scale: random(.7, 1),
                angle: a > data.scene.cameras.main.worldView.height / 2 ? -150 : -210,
                velocity: random(600, 750),
                gravity: 0,
                angVelocity: random(-175, -125),
                lifespan: 2500
            };
        }
        case "left-diamond": {
            const n = random(0, data.scene.cameras.main.worldView.height);

            return {
                x: 0,
                y: n,
                scale: random(.7, 1),
                angle: n > data.scene.cameras.main.worldView.height / 2 ? -30 : 30,
                velocity: random(600, 750),
                gravity: 0,
                angVelocity: random(125, 175),
                lifespan: 2500
            };
        }
        default: return {};
    }
}

class ParticleClass extends GameObjects.Image {
    lifespan: number;
    targets: any[];

    constructor(scene: Scene, x: number, y: number, texture: string) {
        super(scene, x, y, texture);
        this.setDepth(3);
        this.lifespan = 0;
        this.targets = [];
    }

    spawn(x: number, y: number, scale: number, velAngle: number, velSpeed: number, gravity: number, angle: number, lifespan: number, texture: string): void {
        this.setTexture(texture);
        this.setActive(true);
        this.setVisible(true);
        this.setPosition(x, y);
        this.setScale(scale);
        this.targets = [];
        if (this && this.body && this.body instanceof Phaser.Physics.Arcade.Body) this.scene.physics.velocityFromAngle(velAngle, velSpeed, this.body.velocity);
        if (this && this.body && this.body instanceof Phaser.Physics.Arcade.Body) this.body.setGravityY(gravity);
        if (this && this.body && this.body instanceof Phaser.Physics.Arcade.Body) this.body.setAngularVelocity(angle);
        this.lifespan = lifespan;
    }

    update(t: number, s: number): void {
        this.lifespan -= s;
        if (this.lifespan > 0) return;
        this.setActive(false);
        this.setVisible(false);
    }
}

export default class Particles extends Scene {
    rarity: number;
    particles: GameObjects.Group;
    nextParticle: number;
    numExplosions: number;

    constructor(rarity: number) {
        super();
        this.rarity = rarity;
        this.particles = {} as GameObjects.Group;
        this.nextParticle = 0;
        this.numExplosions = 0;
    }
    preload(): void {
        this.load.image("particle-1", "/content/particles/1.png");
        this.load.image("particle-2", "/content/particles/2.png");
        this.load.image("particle-3", "/content/particles/3.png");
        this.load.image("particle-4", "/content/particles/4.png");
        this.load.image("particle-5", "/content/particles/5.png");
        this.load.image("particle-6", "/content/particles/6.png");
        this.load.image("particle-7", "/content/particles/7.png");
    }
    create(): void {
        this.rarity = 0;
        this.particles = this.physics.add.group({
            classType: ParticleClass,
            runChildUpdate: !0
        });
        this.nextParticle = 0;
        this.numExplosions = 0;
        // this.game.events.on("start-particles", (t) => {
        this.game.events.on("start-particles", (t: number) => {
            this.rarity = t;
            this.numExplosions = 1 === t ? 75 : 2 === t ? 100 : -1;
        });
    }
    update(e: number, t: number): void {
        if (this.rarity && 0 !== this.numExplosions && (this.nextParticle -= t, this.nextParticle <= 0)) {
            switch (this.rarity) {
                case 1: {
                    for (let i = 0; i < 2; i++) {
                        const n = this.particles.get();
                        // n && n.spawn(n, Object.values(particleType("center")).concat(`particle-${randomInt(1, 8)}`));
                        n && n.spawn(n, Object.values(particleType("center", this)).concat(`particle-${randomInt(1, 8)}`));
                    }
                    break;
                }
                case 2: {
                    for (let o = 0; o < 2; o++) {
                        const r = this.particles.get();
                        // r && r.spawn(r, Object.values(particleType(o % 2 == 0 ? "left-bottom" : "right-bottom")).concat(`particle-${randomInt(1, 8)}`));
                        r && r.spawn(r, Object.values(particleType(o % 2 == 0 ? "left-bottom" : "right-bottom", this)).concat(`particle-${randomInt(1, 8)}`));
                    }
                    break;
                }
                case 3: {
                    for (let s = 0; s < 2; s++) {
                        const i = this.particles.get();
                        // i && i.spawn(i, Object.values(particleType(s % 2 == 0 ? "left-shower" : "right-shower")).concat(`particle-${randomInt(1, 8)}`));
                        i && i.spawn(i, Object.values(particleType(s % 2 == 0 ? "left-shower" : "right-shower", this)).concat(`particle-${randomInt(1, 8)}`));
                    }
                    break;
                }
                case 4: {
                    for (let l = 0; l < 3; l++) {
                        const c = this.particles.get();
                        // c && c.spawn(c, Object.values(particleType("top")).concat(`particle-${randomInt(1, 8)}`));
                        c && c.spawn(c, Object.values(particleType("top", this)).concat(`particle-${randomInt(1, 8)}`));
                    }
                    break;
                }
                case 5: {
                    for (let u = 0; u < 3; u++) {
                        const d = this.particles.get();
                        // d && d.spawn(...Object.values(particleType(u % 2 == 0 ? "left-diamond" : "right-diamond")), `particle-${randomInt(1, 8)}`);
                        d && d.spawn(...Object.values(particleType(u % 2 == 0 ? "left-diamond" : "right-diamond", this)), `particle-${randomInt(1, 8)}`);
                    }
                    break;
                }
            }
            this.nextParticle = 20;
            this.numExplosions > 0 && (this.numExplosions = Math.max(this.numExplosions - 1, 0));
        }
    }
}
